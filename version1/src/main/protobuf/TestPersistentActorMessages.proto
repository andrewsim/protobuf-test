syntax = "proto2";

import "scalapb/scalapb.proto";
import "CommonTypes.proto";

package protobuftest.proto.actor;

message Embedded {
  optional BigDecimal bigDecimal = 105;
  optional Embedded next = 106;
}

message TestMessage {
  option (scalapb.message).extends = "protobuftest.actor.TestPersistentActor.Command";

  required string a = 1;
  optional string b = 2;
}

message MessageA {
  option (scalapb.message).extends = "protobuftest.actor.TestPersistentActor.Command";
}

message MessageB {
  option (scalapb.message).extends = "protobuftest.actor.TestPersistentActor.Command";

  required sint32 int1 = 101;
  required sint64 long1 = 102;
  required UUID uuid1 = 103;
  required string string1 = 104;
}

message MessageC {
  option (scalapb.message).extends = "protobuftest.actor.TestPersistentActor.Command";

  required OffsetDateTime time = 107;
  required Embedded embedded = 108;
}

message MessageTest {
  option (scalapb.message).extends = "protobuftest.actor.TestPersistentActor.Command";

  oneof value {
    MessageA msgA = 1;
    MessageB msgB = 2;
    MessageA msgA2 = 3;
  }
}

message WrapX {
  option (scalapb.message).extends = "protobuftest.actor.TestPersistentActor.Command";

  required MessageTest msg = 1;
}





message MyFSMStates {

  message StateA {
    option (scalapb.message).extends = "protobuftest.actor.MyFSMActor.MyStateA";
  }

 // message StateB {
 //   option (scalapb.message).extends = "protobuftest.actor.MyFSMActor.MyStateB";
 // }

 // message StateC {
 //   option (scalapb.message).extends = "protobuftest.actor.MyFSMActor.MyStateC";
 // }

  oneof value {
    StateA stateA = 1;
  //  StateB stateB = 2;
  //  StateC stateC = 3;
  }
}

message OrderPhase {

  enum PhaseA {
    PhaseAAlpha = 1;
    PhaseABeta = 2;
    PhaseAGamma = 3;
  }

  // enum PhaseB {
  //   PhaseBAlpha = 1;
  //   PhaseBBeta = 2;
  // }

  // enum PhaseC {
  //   PhaseCAlpha = 1;
  //   PhaseCBeta = 2;
  //   PhaseCGamma = 3;
  //   PhaseCOmega = 4;
  //   PhaseCTheta = 5;
  // }

  oneof phase {
    MyFSMStates.StateA stateA = 1;
  //  MyFSMStates.StateB stateB = 2;
  //  MyFSMStates.StateC stateC = 3;
  }
  oneof state {
    PhaseA phaseA = 101;
  //  PhaseB phaseB = 102;
  //  PhaseC phaseC = 103;
  }
}

message MyStateData {

  required string id = 1;
  required OrderPhase phase = 2;

}

message MyDomainEvent {

  message ApplyInitialize {
    required string id = 1;
  }

  message ApplyOrderPhase {
    required OrderPhase orderPhase = 1;
  }

  oneof event {
    ApplyInitialize applyInitialize = 1;
    ApplyOrderPhase applyOrderPhase = 2;
  }

}


message MyCommand {

    // message Initialize { }

    message GetMyState {
        required int32 index = 1;
    }

    // message SetOrderPhase {
    //   required OrderPhase orderPhase = 1;
    // }

    oneof command {
      // Initialize initialize = 1;
      // SetOrderPhase setOrderPhase = 2;
      GetMyState getState = 3;
    }

}


